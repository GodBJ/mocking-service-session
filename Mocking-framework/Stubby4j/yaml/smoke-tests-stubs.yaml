# fix response for certain request
-  description: Optional description shown in logs
#   uuid: test-a-b-c-1
   request:
     method: POST
     #[GET, HEAD]
     url: /post-body-as-json
     headers:
       content-type: application/json
     post: >
       {"userId":"19","requestId":"(.*)","transactionDate":"(.*)","transactionTime":"(.*)"}

   response:
     # delay response
    # latency: 5000
     headers:
       content-type: application/json
     status: 200
     body: >
       {"requestId": "<%post.1%>", "transactionDate": "<%post.2%>"}
-  description: Optional description shown in logs
#   uuid: test-a-b-c
   request:
      method: POST
      #[GET, HEAD]
      url: /post-body-as-json
      headers:
         content-type: application/json
      post: >
         {"userId":"19","requestId":"(.*)","transactionDate":"(.*)","transactionTime":"(.*)"}

   response:
      # delay response
      latency: 5000
      headers:
         content-type: application/json
      status: 200
      body: >
         {"requestId": "<%post.1%>", "transactionDate": "<%post.2%>", "transactionTime": "<%post.3%>"}


-  description: Stub one
   request:
      url: ^/one$
      method: GET

   response:
      status: 200
      latency: 100
      body: 'One!!!'
# update stub
-  uuid: test-a-b-c-d
   request:
     url: ^/resources/something/new
     query:
        someKey: someValue
     method:
        - GET
   response:
     body: OK
     headers:
        content-type: application/xml
     status: 201
     #返回文件
     #file: responseData.xml

-  request:
      method: POST
      url: /post-body-as-json
      headers:
         content-type: application/json
      post: >
         {"userId":"18","requestId":"(.*)","transactionDate":"(.*)","transactionTime":"(.*)"}

   response:
      headers:
         content-type: application/json
      status: 200
      body: >
         {"requestId": "<%post.1%>", "transactionDate": "<%post.2%>"}
#falut injection,where after X good responses on the same URI you get a bad one
-  request:
      method: [GET]
      url: /uri/with/sequenced/responses

   response:
      -  status: 201
         headers:
            content-type: application/json
         body: OK

      -  status: 201
         headers:
            content-stype: application/json
         body: Still going strong!

      -  status: 500
         headers:
            content-type: application/json
         body: OMG!!!

# copy request value to response
### During HTTP request verification,
#you can leverage regex capturing groups (Regex stubbing for dynamic matching) as token values for dynamic token replacement in stubbed response.


# regex match
#regex stubbing for dynamic matching on the following properties:
#request url
#request query param values
#request header name values
#request post payloads
#request file names & payloads.
-  request:
      method: [GET]
      url: ^/account/(\d{5})/category/([a-zA-Z]+)
      query:
         date: "([a-zA-Z]+)"
      headers:
         custom-header: "[0-9]+"

   response:
      status: 200
      body: Returned invoice number# <% url.1 %> in category '<% url.2 %>' on the date '<% query.date.1 %>', using header custom-header <% headers.custom-header.0 %>

# record and replay
# The HTTP response recorded on the first call, having the subsequent calls play back the recorded HTTP response, without actually connecting to the external server
-  request:
     method: [GET]
     url: /compliance/(\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b)
     headers:
        x-myobapi-tenantid: "(\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b)"
        x-myobapi-clientid: "(\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b)"
   response:
     body: http://host.docker.internal:5000

# proxy config
# Ability to configure a proxy/intercept where requests are proxied to another service
- proxy-config:
     description: this is a default proxy config that serves as a catch-all for non-matched requests
     strategy: as-is
     properties:
        endpoint: http://host.docker.internal:5050

- proxy-config:
    uuid: another-very-unique-string
    description: this is a non-default proxy config which hits Yahoo
    strategy: additive
    headers:
      content-type: application/json
    properties:
      endpoint: https://yahoo.com

- proxy-config:
     uuid: some-very-unique-string
     description: this is a non-default proxy config which hits Google
     strategy: as-is
     properties:
        endpoint: http://host.docker.internal:5050
